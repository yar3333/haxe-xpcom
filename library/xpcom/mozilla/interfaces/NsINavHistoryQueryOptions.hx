package xpcom.mozilla.interfaces;

import xpcom.types.*;
import xpcom.mozilla.objects.*;

@:native("Components.interfaces.nsINavHistoryQueryOptions") extern class NsINavHistoryQueryOptions extends NsISupports
{
	/**
	 * If true, the query options are only applied to the containers.
	 */
	var applyOptionsToContainers : Bool;
	/**
	 * When true, the root container node generated by these options and all of its descendant containers are opened asynchronously if they support doing so. By default, this is false.
	 * Note: Currently, only bookmark folder containers support being opened asynchronously.
	 */
	var asyncEnabled : Bool;
	/**
	 * This option excludes items from a bookmarks query if the parent of the item has this annotation. An example is to exclude livemark items (parent folders have the "livemark/feedURI" annotation). Ignored for queries over history.
	 * Obsolete since Gecko 13.0
	 */
	var excludeItemIfParentHasAnnotation  : AUTF8String;
	/**
	 * This option excludes all URIs and separators from a bookmarks query. This would be used if you just wanted a list of bookmark folders and queries (such as the left pane of the places page). Ignored for queries over history. Defaults to false.
	 */
	var excludeItems : Bool;
	/**
	 * Set to true to exclude queries ("place:" URIs) from the query results. Simple folder queries (bookmark folder symlinks) will still be included. Defaults to false.
	 */
	var excludeQueries : Bool;
	/**
	 * Set to true to exclude read-only folders from the query results. This is designed for cases where you want to give the user the option of filing something into a list of folders. It only affects cases where the actual folder result node would appear in its parent folder and filters it out. It doesn't affect the query at all, and doesn't affect more complex queries (such as "folders with annotation X").
	 */
	var excludeReadOnlyFolders : Bool;
	/**
	 * When set, allows items with "place:" URIs to appear as containers, with the container's contents filled in from the stored query. If not set, these will appear as normal items. Doesn't do anything if excludeQueries is set. Defaults to false.
	 * Note that this has no effect on folder links, which are place: URIs returned by nsINavBookmarkService's getFolderURI method. These are always expanded and will appear as bookmark folders.
	 */
	var expandQueries : Bool;
	/**
	 * Most items in history are marked "hidden." Only toplevel pages that the user sees in the URL bar are not hidden. Hidden things include the content of iframes and all images on web pages. Normally, you don't want these things. If you do, set this flag and you'll get all items, even hidden ones. Does nothing for bookmark queries. Defaults to false.
	 */
	var includeHidden : Bool;
	/**
	 * This is the maximum number of results that you want. The query is exeucted, the results are sorted, and then the top maxResults results are taken and returned. Set to "0" (the default) to get all results.
	 * This does not work in conjunction with sorting by title. This is because sorting by title requires us to sort after using locale-sensetive sorting (as opposed to letting the database do it for us). Instead, we get the result ordered by date, pick the maxResult most recent ones, and then sort by title.
	 */
	var maxResults : Long;
	/**
	 * The type of search to use when querying the DB; This attribute is only honored by query nodes. It is silently ignored for simple folder queries. See Query type constants for possible values.
	 */
	var queryType : Short;
	/**
	 * Specifies how to handle redirects; see Redirects mode constants for details. The default value is REDIRECTS_MODE_ALL.
	 * Note: This option is only used on QUERY_TYPE_HISTORY.
	 */
	var redirectsMode : UShort;
	/**
	 * If a bookmark title is NULL (note, not empty), attempt to use the history title. It is set to false by default.
	 */
	var resolveNullBookmarkTitles : Bool;
	/**
	 * Sets the result type. See Result type constants for possible values.
	 */
	var resultType : Short;
	/**
	 * Separate/group history items based on session information. Only matters when sorting by date.
	 */
	var showSessions : Bool;
	/**
	 * The annotation to use in SORT_BY_ANNOTATION_* sorting modes.
	 */
	var sortingAnnotation : AUTF8String;
	/**
	 * The sorting annotation to use; see Sorting methods for possible values.
	 */
	var sortingMode : Short;
	
	function clone() : NsINavHistoryQueryOptions;
}
